From b4d494752e759e0c5e6527b06874a7394b690344 Mon Sep 17 00:00:00 2001
From: Gustavo Solaira <gustavos@codeaurora.org>
Date: Mon, 27 Apr 2015 16:07:01 -0700
Subject: [PATCH] Compile without libselinux

---
 contents.c         | 17 +++++++++++++++--
 make_ext4fs.c      |  8 ++++++--
 make_ext4fs_main.c |  6 +++---
 3 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/contents.c b/contents.c
index 3abbdc3..09a598f 100644
--- a/contents.c
+++ b/contents.c
@@ -20,10 +20,23 @@
 
 #ifdef HAVE_ANDROID_OS
 #include <linux/capability.h>
-#else
-#include <private/android_filesystem_capability.h>
 #endif
 
+#ifdef HOST
+#include <stdint.h>
+#define VFS_CAP_U32 2
+#define VFS_CAP_REVISION 0x02000000
+#define VFS_CAP_FLAGS_EFFECTIVE 0x000001
+
+struct vfs_cap_data {
+ uint32_t magic_etc;
+ struct {
+ uint32_t permitted;
+ uint32_t inheritable;
+ } data[VFS_CAP_U32];
+};
+#endif /* HOST */
+
 #define XATTR_SELINUX_SUFFIX "selinux"
 #define XATTR_CAPS_SUFFIX "capability"
 
diff --git a/make_ext4fs.c b/make_ext4fs.c
index c2a2665..0815894 100644
--- a/make_ext4fs.c
+++ b/make_ext4fs.c
@@ -59,9 +59,11 @@
 
 #else
 
+#ifdef USE_SELINUX
 #include <selinux/selinux.h>
 #include <selinux/label.h>
 #include <selinux/android.h>
+#endif
 
 #define O_BINARY 0
 
@@ -180,7 +182,7 @@ static u32 build_directory_structure(const char *full_path, const char *dir_path
 			error("can't set android permissions - built without android support");
 #endif
 		}
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(USE_SELINUX)
 		if (sehnd) {
 			if (selabel_lookup(sehnd, &dentries[i].secon, dentries[i].path, stat.st_mode) < 0) {
 				error("cannot lookup security context for %s", dentries[i].path);
@@ -231,10 +233,12 @@ static u32 build_directory_structure(const char *full_path, const char *dir_path
 		dentries[0].file_type = EXT4_FT_DIR;
 		dentries[0].uid = 0;
 		dentries[0].gid = 0;
+#ifdef USE_SELINUX
 		if (sehnd) {
 			if (selabel_lookup(sehnd, &dentries[0].secon, dentries[0].path, dentries[0].mode) < 0)
 				error("cannot lookup security context for %s", dentries[0].path);
 		}
+#endif
 		entries++;
 		dirs++;
 	}
@@ -575,7 +579,7 @@ int make_ext4fs_internal(int fd, const char *_directory,
 	root_mode = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
 	inode_set_permissions(root_inode_num, root_mode, 0, 0, 0);
 
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(USE_SELINUX)
 	if (sehnd) {
 		char *secontext = NULL;
 
diff --git a/make_ext4fs_main.c b/make_ext4fs_main.c
index b6c740d..c1fa89f 100644
--- a/make_ext4fs_main.c
+++ b/make_ext4fs_main.c
@@ -29,7 +29,7 @@
 #include <private/android_filesystem_config.h>
 #endif
 
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(USE_SELINUX)
 #include <selinux/selinux.h>
 #include <selinux/label.h>
 #include <selinux/android.h>
@@ -72,7 +72,7 @@ int main(int argc, char **argv)
 	int exitcode;
 	int verbose = 0;
 	struct selabel_handle *sehnd = NULL;
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(USE_SELINUX)
 	struct selinux_opt seopts[] = { { SELABEL_OPT_PATH, "" } };
 #endif
 
@@ -131,7 +131,7 @@ int main(int argc, char **argv)
 			fprintf(stderr, "Warning: -t (initialize inode tables) is deprecated\n");
 			break;
 		case 'S':
-#ifndef USE_MINGW
+#if !defined(USE_MINGW) && defined(USE_SELINUX)
 			seopts[0].value = optarg;
 			sehnd = selabel_open(SELABEL_CTX_FILE, seopts, 1);
 			if (!sehnd) {
-- 
1.8.2.1

