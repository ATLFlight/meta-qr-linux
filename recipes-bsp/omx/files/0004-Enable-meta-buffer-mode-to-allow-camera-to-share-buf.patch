From 2d81a177f1f649b6e0a1ae97b97c9dad6fb4c4f9 Mon Sep 17 00:00:00 2001
From: ntewolde <ntewolde@codeaurora.org>
Date: Fri, 7 Aug 2015 15:05:50 -0700
Subject: [PATCH] Enable meta buffer mode to allow camera to share buffers with
 video encoder

---
 mm-video-v4l2/vidc/venc/Makefile.am                |  2 ++
 mm-video-v4l2/vidc/venc/inc/omx_video_base.h       | 12 ++++++-----
 mm-video-v4l2/vidc/venc/src/omx_video_base.cpp     | 24 +++++++++++++++++++---
 mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp  |  6 ++++--
 .../vidc/venc/src/video_encoder_device_v4l2.cpp    |  9 +++++---
 5 files changed, 40 insertions(+), 13 deletions(-)

diff --git a/mm-video-v4l2/vidc/venc/Makefile.am b/mm-video-v4l2/vidc/venc/Makefile.am
index 66d2346..131292c 100644
--- a/mm-video-v4l2/vidc/venc/Makefile.am
+++ b/mm-video-v4l2/vidc/venc/Makefile.am
@@ -14,11 +14,13 @@ AM_CPPFLAGS += -DENABLE_DEBUG_HIGH
 AM_CPPFLAGS += -DENABLE_DEBUG_ERROR
 AM_CPPFLAGS += -UINPUT_BUFFER_LOG
 AM_CPPFLAGS += -UOUTPUT_BUFFER_LOG
+AM_CPPFLAGS += -D_ANDROID_ICS_
 AM_CPPFLAGS += -Iinc
 AM_CPPFLAGS += -I../common/inc
 AM_CPPFLAGS += -I../../../mm-core/inc
 AM_CPPFLAGS += -I../../../mm-core/src/common
 AM_CPPFLAGS += -I../../../mm-core/src/common
+AM_CPPFLAGS += -I../../../libstagefrighthw/
 AM_CPPFLAGS += `pkg-config --cflags glib-2.0`
 
 AM_CPPFLAGS += -DMAX_RES_1080P
diff --git a/mm-video-v4l2/vidc/venc/inc/omx_video_base.h b/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
index 010ef97..551d3fd 100644
--- a/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
+++ b/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
@@ -48,10 +48,10 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <sys/mman.h>
 #ifdef _ANDROID_
 #include <binder/MemoryHeapBase.h>
+#endif // _ANDROID_
 #ifdef _ANDROID_ICS_
 #include "QComOMXMetadata.h"
 #endif
-#endif // _ANDROID_
 #include <pthread.h>
 #include <semaphore.h>
 #include <linux/msm_vidc_enc.h>
@@ -64,13 +64,14 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "extra_data_handler.h"
 #include <linux/videodev2.h>
 #include <dlfcn.h>
-#ifdef _ANDROID_ICS_
+#ifdef _ANDROID_
 #include "C2DColorConverter.h"
-#endif // _ANDROID_ICS_
+#endif // _ANDROID_
 #include "vidc_debug.h"
 
-#ifdef _ANDROID_
 using namespace android;
+
+#ifdef _ANDROID_
 // local pmem heap object
 class VideoHeap : public MemoryHeapBase
 {
@@ -156,7 +157,7 @@ class omx_video: public qc_omx_component
         bool secure_session;
 #ifdef _ANDROID_ICS_
         encoder_media_buffer_type meta_buffers[MAX_NUM_INPUT_BUFFERS];
-
+#ifdef _ANDROID_
         class omx_c2d_conv
         {
             public:
@@ -181,6 +182,7 @@ class omx_video: public qc_omx_component
         };
         omx_c2d_conv c2d_conv;
 #endif
+#endif
     public:
         omx_video();  // constructor
         virtual ~omx_video();  // destructor
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
index a75f10c..b3de934 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
@@ -45,7 +45,7 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/prctl.h>
-#ifdef _ANDROID_ICS_
+#ifdef _ANDROID_
 #include <media/hardware/HardwareAPI.h>
 #include <gralloc_priv.h>
 #endif
@@ -403,7 +403,7 @@ void omx_video::process_event_cb(void *ctxt, unsigned char id)
                 case OMX_COMPONENT_GENERATE_ETB_OPQ:
                     DEBUG_PRINT_LOW("OMX_COMPONENT_GENERATE_ETB_OPQ");
 // Not support in Linux, no meta mode
-#ifdef _ANDROID_ICS_
+#ifdef _ANDROID_
                     if (pThis->empty_this_buffer_opaque((OMX_HANDLETYPE)p1,\
                                 (OMX_BUFFERHEADERTYPE *)p2) != OMX_ErrorNone) {
                         DEBUG_PRINT_ERROR("ERROR: ETBProxy() failed!");
@@ -2468,8 +2468,10 @@ OMX_ERRORTYPE omx_video::free_input_buffer(OMX_BUFFERHEADERTYPE *bufferHdr)
         if (!mUseProxyColorFormat)
             return OMX_ErrorNone;
         else {
+#ifdef _ANDROID_
             c2d_conv.close();
             opaque_buffer_hdr[index] = NULL;
+#endif
         }
     }
 #endif
@@ -3349,6 +3351,8 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
                     Input_pmem_info.fd, Input_pmem_info.offset,
                     Input_pmem_info.size);
         } else {
+            // Gralloc source
+#ifdef _ANDROID_
             private_handle_t *handle = (private_handle_t *)media_buffer->meta_handle;
             Input_pmem_info.buffer = media_buffer;
             Input_pmem_info.fd = handle->fd;
@@ -3360,6 +3364,7 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
             DEBUG_PRINT_LOW("ETB (meta-gralloc) fd = %d, offset = %d, size = %d",
                     Input_pmem_info.fd, Input_pmem_info.offset,
                     Input_pmem_info.size);
+#endif
         }
         if (dev_use_buf(&Input_pmem_info,PORT_INDEX_IN,0) != true) {
             DEBUG_PRINT_ERROR("ERROR: in dev_use_buf");
@@ -3369,10 +3374,12 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
     } else if (meta_mode_enable && !mUsesColorConversion) {
         // Graphic-source meta-buffers queued with opaque color-format
         if (media_buffer->buffer_type == kMetadataBufferTypeGrallocSource) {
+#ifdef _ANDROID_
             private_handle_t *handle = (private_handle_t *)media_buffer->meta_handle;
             fd = handle->fd;
             DEBUG_PRINT_LOW("ETB (opaque-gralloc) fd = %d, size = %d",
                     fd, handle->size);
+#endif
         } else {
             DEBUG_PRINT_ERROR("ERROR: Invalid bufferType for buffer with Opaque"
                     " color format");
@@ -4288,11 +4295,13 @@ void omx_video::omx_release_meta_buffer(OMX_BUFFERHEADERTYPE *buffer)
                             Input_pmem.offset,
                             Input_pmem.size);
                 } else if (media_ptr->buffer_type == kMetadataBufferTypeGrallocSource) {
+#ifdef _ANDROID_
                     private_handle_t *handle = (private_handle_t *)media_ptr->meta_handle;
                     Input_pmem.buffer = media_ptr;
                     Input_pmem.fd = handle->fd;
                     Input_pmem.offset = 0;
                     Input_pmem.size = handle->size;
+#endif
                 } else {
                     meta_error = true;
                     DEBUG_PRINT_ERROR(" Meta Error set in EBD");
@@ -4307,6 +4316,8 @@ void omx_video::omx_release_meta_buffer(OMX_BUFFERHEADERTYPE *buffer)
         }
     }
 }
+
+#ifdef _ANDROID_
 omx_video::omx_c2d_conv::omx_c2d_conv()
 {
     c2dcc = NULL;
@@ -4435,6 +4446,7 @@ bool omx_video::omx_c2d_conv::get_buffer_size(int port,unsigned int &buf_size)
     return ret;
 }
 
+
 OMX_ERRORTYPE  omx_video::empty_this_buffer_opaque(OMX_IN OMX_HANDLETYPE hComp,
         OMX_IN OMX_BUFFERHEADERTYPE* buffer)
 {
@@ -4515,6 +4527,7 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_opaque(OMX_IN OMX_HANDLETYPE hComp,
     }
     return ret;
 }
+#endif
 
 OMX_ERRORTYPE omx_video::queue_meta_buffer(OMX_HANDLETYPE hComp,
         struct pmem &Input_pmem_info)
@@ -4550,6 +4563,7 @@ OMX_ERRORTYPE omx_video::queue_meta_buffer(OMX_HANDLETYPE hComp,
     return ret;
 }
 
+#ifdef _ANDROID_
 OMX_ERRORTYPE omx_video::convert_queue_buffer(OMX_HANDLETYPE hComp,
         struct pmem &Input_pmem_info,unsigned &index)
 {
@@ -4633,6 +4647,7 @@ OMX_ERRORTYPE omx_video::convert_queue_buffer(OMX_HANDLETYPE hComp,
     }
     return ret;
 }
+#endif
 
 // Not supported in Linux, no libstagefright
 OMX_ERRORTYPE omx_video::push_input_buffer(OMX_HANDLETYPE hComp)
@@ -4669,7 +4684,9 @@ OMX_ERRORTYPE omx_video::push_input_buffer(OMX_HANDLETYPE hComp)
                     Input_pmem_info.offset,
                     Input_pmem_info.size);
             ret = queue_meta_buffer(hComp,Input_pmem_info);
-        } else if ((psource_frame->nFlags & OMX_BUFFERFLAG_EOS) && mUseProxyColorFormat) {
+        }
+#ifdef _ANDROID_
+        else if ((psource_frame->nFlags & OMX_BUFFERFLAG_EOS) && mUseProxyColorFormat) {
             ret = convert_queue_buffer(hComp,Input_pmem_info,index);
         } else {
             private_handle_t *handle = (private_handle_t *)media_buffer->meta_handle;
@@ -4684,6 +4701,7 @@ OMX_ERRORTYPE omx_video::push_input_buffer(OMX_HANDLETYPE hComp)
             else
                 ret = OMX_ErrorBadParameter;
         }
+#endif
     }
     return ret;
 }
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
index 29671bf..d236e35 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
@@ -70,8 +70,10 @@ omx_venc::omx_venc()
     mUseProxyColorFormat = false;
     get_syntaxhdr_enable = false;
 	char property_value[PROPERTY_VALUE_MAX] = {0};
+#ifdef _ANDROID_
     property_get("vidc.debug.level", property_value, "0");
     debug_level = atoi(property_value);
+#endif
     property_value[0] = '\0';
 #endif
 }
@@ -540,7 +542,7 @@ OMX_ERRORTYPE  omx_venc::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                     DEBUG_PRINT_LOW("i/p previous min cnt = %lu", m_sInPortDef.nBufferCountMin);
                     memcpy(&m_sInPortDef, portDefn,sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
 
-#ifdef _ANDROID_ICS_
+#ifdef _ANDROID_
                     if (portDefn->format.video.eColorFormat ==
                             (OMX_COLOR_FORMATTYPE)QOMX_COLOR_FormatAndroidOpaque) {
                         m_sInPortDef.format.video.eColorFormat = (OMX_COLOR_FORMATTYPE)
@@ -622,7 +624,7 @@ OMX_ERRORTYPE  omx_venc::set_parameter(OMX_IN OMX_HANDLETYPE     hComp,
                             portFmt->eColorFormat);
                     update_profile_level(); //framerate
 
-#ifdef _ANDROID_ICS_
+#ifdef _ANDROID_
                     if (portFmt->eColorFormat ==
                             (OMX_COLOR_FORMATTYPE)QOMX_COLOR_FormatAndroidOpaque) {
                         m_sInPortFormat.eColorFormat = (OMX_COLOR_FORMATTYPE)
diff --git a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
index 66ad752..d3b32ce 100644
--- a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
+++ b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
@@ -2286,7 +2286,7 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
     struct v4l2_plane plane;
     int rc=0;
     struct OMX_BUFFERHEADERTYPE *bufhdr;
-#ifdef _ANDROID_
+#ifdef _ANDROID_ICS_
     encoder_media_buffer_type * meta_buf = NULL;
 #endif
     temp_buffer = (struct pmem *)buffer;
@@ -2320,7 +2320,7 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
         // ---------------------------------------------------------------------------------------
         if (metadatamode) {
 // Not supported in Linux, no meta mode
-#ifdef _ANDROID_
+#ifdef _ANDROID_ICS_
             meta_buf = (encoder_media_buffer_type *)bufhdr->pBuffer;
 
             if (!meta_buf)
@@ -2334,7 +2334,9 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
                     plane.bytesused = meta_buf->meta_handle->data[2];
                     DEBUG_PRINT_LOW("venc_empty_buf: camera buf: fd = %d filled %d of %d",
                             fd, plane.bytesused, plane.length);
-                } else if (meta_buf->buffer_type == kMetadataBufferTypeGrallocSource) {
+                }
+#ifdef _ANDROID_
+                else if (meta_buf->buffer_type == kMetadataBufferTypeGrallocSource) {
                     private_handle_t *handle = (private_handle_t *)meta_buf->meta_handle;
                     fd = handle->fd;
                     plane.data_offset = 0;
@@ -2343,6 +2345,7 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
                     DEBUG_PRINT_LOW("venc_empty_buf: Opaque camera buf: fd = %d filled %d of %d",
                             fd, plane.bytesused, plane.length);
                 }
+#endif
             } else {
                 plane.m.userptr = (unsigned long) bufhdr->pBuffer;
                 plane.data_offset = bufhdr->nOffset;
-- 
1.8.2

