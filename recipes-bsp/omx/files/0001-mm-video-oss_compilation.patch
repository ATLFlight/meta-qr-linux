From 72ef3a7d44c8e76a6179cb8af0f809edd264f9a9 Mon Sep 17 00:00:00 2001
From: Gustavo Solaira <gustavos@codeaurora.org>
Date: Mon, 6 Jul 2015 17:27:06 -0700
Subject: [PATCH] Fix compilation in Linux

---
 Makefile.am                                        |  5 +++
 configure.ac                                       | 50 +++++++++++++++++++++
 mm-core/Makefile.am                                | 52 ++++++++++++++++++++++
 mm-core/inc/qc_omx_msg.h                           |  7 +--
 mm-video-v4l2/vidc/common/inc/vidc_debug.h         | 10 ++---
 mm-video-v4l2/vidc/venc/Makefile.am                | 38 ++++++++++++++++
 mm-video-v4l2/vidc/venc/inc/omx_video_base.h       | 11 +++--
 mm-video-v4l2/vidc/venc/src/omx_video_base.cpp     | 21 ++++++++-
 mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp  |  6 +--
 .../vidc/venc/src/video_encoder_device_v4l2.cpp    | 19 ++++++--
 10 files changed, 199 insertions(+), 20 deletions(-)
 create mode 100644 Makefile.am
 create mode 100644 configure.ac
 create mode 100644 mm-core/Makefile.am
 create mode 100644 mm-video-v4l2/vidc/venc/Makefile.am

diff --git a/Makefile.am b/Makefile.am
new file mode 100644
index 0000000..5f33f7c
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,5 @@
+# Makefile.am - Automake script for mm-omxvideo
+#
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = mm-core mm-video-v4l2/vidc/venc
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..a85be9e
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,50 @@
+#                                               -*- Autoconf -*-
+
+# configure.ac -- Autoconf script for mm-omxvideo
+#
+
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ(2.61)
+AC_INIT([omxvideo],
+	1.0.0)
+AM_INIT_AUTOMAKE([-Wall -Werror gnu foreign subdir-objects])
+AM_MAINTAINER_MODE
+AC_CONFIG_HEADER([config.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+#release versioning
+OMXVIDEO_MAJOR_VERSION=1
+OMXVIDEO_MINOR_VERSION=0
+OMXVIDEO_MICRO_VERSION=0
+
+OMXVIDEO_LIBRARY_VERSION=$OMXVIDEO_MAJOR_VERSION:$OMXVIDEO_MINOR_VERSION:$OMXVIDEO_MICRO_VERSION
+AC_SUBST(OMXVIDEO_LIBRARY_VERSION)
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_CPP
+AC_PROG_CXX
+AM_PROG_CC_C_O
+AM_PROG_AR
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_INSTALL
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+
+AC_ARG_WITH([sanitized-headers],
+	[AS_HELP_STRING([--with-sanitized-headers=DIR],[location of the sanitized Linux headers])],
+	[CPPFLAGS="$CPPFLAGS -I$withval"])
+
+PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.16, dummy=yes,
+	AC_MSG_ERROR(GLib >= 2.16 is required))
+GLIB_LIBS="$GLIB_LIBS $GTHREAD_LIBS"
+AC_SUBST(GLIB_LIBS)
+
+AC_CONFIG_FILES([
+	Makefile \
+	mm-core/Makefile \
+	mm-video-v4l2/vidc/venc/Makefile
+	])
+AC_OUTPUT
diff --git a/mm-core/Makefile.am b/mm-core/Makefile.am
new file mode 100644
index 0000000..f377275
--- /dev/null
+++ b/mm-core/Makefile.am
@@ -0,0 +1,52 @@
+# sources and intermediate files are separated
+
+AM_CFLAGS = -Wall
+AM_CFLAGS += -Wundef
+AM_CFLAGS += -Wstrict-prototypes
+AM_CFLAGS += -Wno-trigraphs
+AM_CFLAGS += -g -O3
+AM_CFLAGS += -O0 -fno-inline -fno-short-enums
+AM_CFLAGS += -fPIC
+
+AM_CPPFLAGS = -D_ENABLE_QC_MSG_LOG_
+AM_CPPFLAGS += -Iinc
+AM_CPPFLAGS += -Isrc/common
+
+MM_CORE_TARGET = 8974
+
+h_sources = inc/OMX_Audio.h
+h_sources += inc/OMX_Component.h
+h_sources += inc/OMX_ContentPipe.h
+h_sources += inc/OMX_Core.h
+h_sources += inc/OMX_Image.h
+h_sources += inc/OMX_Index.h
+h_sources += inc/OMX_IVCommon.h
+h_sources += inc/OMX_Other.h
+h_sources += inc/OMX_QCOMExtns.h
+h_sources += inc/OMX_Types.h
+h_sources += inc/OMX_Video.h
+h_sources += inc/qc_omx_common.h
+h_sources += inc/qc_omx_component.h
+h_sources += inc/qc_omx_msg.h
+h_sources += inc/QOMX_AudioExtensions.h
+h_sources += inc/QOMX_AudioIndexExtensions.h
+h_sources += inc/OMX_CoreExt.h
+h_sources += inc/QOMX_CoreExtensions.h
+h_sources += inc/QOMX_FileFormatExtensions.h
+h_sources += inc/QOMX_IVCommonExtensions.h
+h_sources += inc/QOMX_SourceExtensions.h
+h_sources += inc/QOMX_VideoExtensions.h
+h_sources += inc/OMX_IndexExt.h
+h_sources += inc/OMX_VideoExt.h
+h_sources += inc/QOMX_StreamingExtensions.h
+h_sources += inc/QCMediaDefs.h
+h_sources += inc/QCMetaData.h
+
+c_sources = src/common/omx_core_cmp.cpp
+c_sources += src/common/qc_omx_core.c
+c_sources += src/$(MM_CORE_TARGET)/qc_registry_table.c
+
+include_HEADERS = $(h_sources)
+lib_LTLIBRARIES = libOmxCore.la
+libOmxCore_la_SOURCES = $(c_sources)
+libOmxCore_la_LDFLAGS = -ldl -lrt -lpthread -shared -version-info $(OMXVIDEO_LIBRARY_VERSION)
diff --git a/mm-core/inc/qc_omx_msg.h b/mm-core/inc/qc_omx_msg.h
index deb0ab7..1754fe9 100644
--- a/mm-core/inc/qc_omx_msg.h
+++ b/mm-core/inc/qc_omx_msg.h
@@ -73,9 +73,10 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         #define DEBUG_PRINT       LOGI
         #define DEBUG_DETAIL      LOGV
     #else
-        #define DEBUG_PRINT_ERROR printf
-        #define DEBUG_PRINT       printf
-        #define DEBUG_DETAIL      printf
+        #include <syslog.h>
+        #define DEBUG_PRINT_ERROR(fmt, args...) syslog(LOG_ERR, fmt, ##args)
+        #define DEBUG_PRINT(fmt, args...)       syslog(LOG_DEBUG, fmt, ##args)
+        #define DEBUG_DETAIL(fmt, args...)      syslog(LOG_DEBUG, fmt, ##args)
     #endif // _ANDROID_
 #else
     #define DEBUG_PRINT_ERROR
diff --git a/mm-video-v4l2/vidc/common/inc/vidc_debug.h b/mm-video-v4l2/vidc/common/inc/vidc_debug.h
index 9631135..20aebba 100644
--- a/mm-video-v4l2/vidc/common/inc/vidc_debug.h
+++ b/mm-video-v4l2/vidc/common/inc/vidc_debug.h
@@ -29,7 +29,6 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef __VIDC_DEBUG_H__
 #define __VIDC_DEBUG_H__
 
-#ifdef _ANDROID_
 #include <cstdio>
 
 enum {
@@ -52,10 +51,11 @@ extern int debug_level;
 #define DEBUG_PRINT_HIGH(fmt, args...) \
       if (debug_level & PRIO_HIGH) \
           ALOGD(fmt,##args)
-#else
-#define DEBUG_PRINT_ERROR printf
-#define DEBUG_PRINT_LOW printf
-#define DEBUG_PRINT_HIGH printf
+
+#ifndef _ANDROID_
+#include <syslog.h>
+#define ALOGE(fmt, args...) syslog(LOG_ERR, fmt, ##args)
+#define ALOGD(fmt, args...) syslog(LOG_DEBUG, fmt, ##args)
 #endif
 
 #endif
diff --git a/mm-video-v4l2/vidc/venc/Makefile.am b/mm-video-v4l2/vidc/venc/Makefile.am
new file mode 100644
index 0000000..66d2346
--- /dev/null
+++ b/mm-video-v4l2/vidc/venc/Makefile.am
@@ -0,0 +1,38 @@
+AM_CFLAGS = -Wall
+AM_CFLAGS += -Wundef
+AM_CFLAGS += -Wstrict-prototypes
+AM_CFLAGS += -Wno-trigraphs
+AM_CFLAGS += -g -O3 -Dlrintf=_ffix_r
+
+AM_CPPFLAGS = -D__align=__alignx
+AM_CPPFLAGS += -D__alignx\(x\)=__attribute__\(\(__aligned__\(x\)\)\)
+AM_CPPFLAGS += -Dinline=__inline
+AM_CPPFLAGS += -DCDECL
+AM_CPPFLAGS += -DT_ARM
+AM_CPPFLAGS += -UENABLE_DEBUG_LOW
+AM_CPPFLAGS += -DENABLE_DEBUG_HIGH
+AM_CPPFLAGS += -DENABLE_DEBUG_ERROR
+AM_CPPFLAGS += -UINPUT_BUFFER_LOG
+AM_CPPFLAGS += -UOUTPUT_BUFFER_LOG
+AM_CPPFLAGS += -Iinc
+AM_CPPFLAGS += -I../common/inc
+AM_CPPFLAGS += -I../../../mm-core/inc
+AM_CPPFLAGS += -I../../../mm-core/src/common
+AM_CPPFLAGS += -I../../../mm-core/src/common
+AM_CPPFLAGS += `pkg-config --cflags glib-2.0`
+
+AM_CPPFLAGS += -DMAX_RES_1080P
+AM_CPPFLAGS += -DMAX_RES_1080P_EBI
+AM_CPPFLAGS += -DPROCESS_EXTRADATA_IN_OUTPUT_PORT
+AM_CPPFLAGS += -D_MSM8974_
+AM_CPPFLAGS += -DUSE_ION
+
+sources = src/omx_video_base.cpp
+sources += src/omx_video_encoder.cpp
+sources += src/video_encoder_device_v4l2.cpp
+sources += ../common/src/extra_data_handler.cpp
+
+lib_LTLIBRARIES = libOmxVenc.la
+libOmxVenc_la_SOURCES = $(sources)
+libOmxVenc_la_CFLAGS = $(AM_CFLAGS) -fPIC
+libOmxVenc_la_LDFLAGS = -shared -version-info $(OMXVIDEO_LIBRARY_VERSION) @GLIB_LIBS@ -lcutils
diff --git a/mm-video-v4l2/vidc/venc/inc/omx_video_base.h b/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
index 408e13f..010ef97 100644
--- a/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
+++ b/mm-video-v4l2/vidc/venc/inc/omx_video_base.h
@@ -64,7 +64,9 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "extra_data_handler.h"
 #include <linux/videodev2.h>
 #include <dlfcn.h>
+#ifdef _ANDROID_ICS_
 #include "C2DColorConverter.h"
+#endif // _ANDROID_ICS_
 #include "vidc_debug.h"
 
 #ifdef _ANDROID_
@@ -135,19 +137,15 @@ static const char* MEM_DEVICE = "/dev/pmem_smipool";
         & BITMASK_FLAG(mIndex))
 #define BITMASK_ABSENT(mArray,mIndex) (((mArray)[BITMASK_OFFSET(mIndex)] \
             & BITMASK_FLAG(mIndex)) == 0x0)
-#ifdef _ANDROID_ICS_
 #define MAX_NUM_INPUT_BUFFERS 32
-#endif
 void* message_thread(void *);
 
 // OMX video class
 class omx_video: public qc_omx_component
 {
     protected:
-#ifdef _ANDROID_ICS_
         bool meta_mode_enable;
         bool c2d_opened;
-        encoder_media_buffer_type meta_buffers[MAX_NUM_INPUT_BUFFERS];
         OMX_BUFFERHEADERTYPE *opaque_buffer_hdr[MAX_NUM_INPUT_BUFFERS];
         bool mUseProxyColorFormat;
         //RGB or non-native input, and we have pre-allocated conversion buffers
@@ -156,6 +154,8 @@ class omx_video: public qc_omx_component
         OMX_BUFFERHEADERTYPE  *psource_frame;
         OMX_BUFFERHEADERTYPE  *pdest_frame;
         bool secure_session;
+#ifdef _ANDROID_ICS_
+        encoder_media_buffer_type meta_buffers[MAX_NUM_INPUT_BUFFERS];
 
         class omx_c2d_conv
         {
@@ -485,7 +485,10 @@ class omx_video: public qc_omx_component
                 OMX_BUFFERHEADERTYPE *buffer);
         OMX_ERRORTYPE empty_this_buffer_opaque(OMX_HANDLETYPE hComp,
                 OMX_BUFFERHEADERTYPE *buffer);
+// Not supported in Linux, no libstagefright
+#ifdef _ANDROID_ICS_
         OMX_ERRORTYPE push_input_buffer(OMX_HANDLETYPE hComp);
+#endif
         OMX_ERRORTYPE convert_queue_buffer(OMX_HANDLETYPE hComp,
                 struct pmem &Input_pmem_info,unsigned &index);
         OMX_ERRORTYPE queue_meta_buffer(OMX_HANDLETYPE hComp,
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
index 627015e..528b3ab 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_base.cpp
@@ -52,6 +52,8 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #ifndef _ANDROID_
 #include <glib.h>
 #define strlcpy g_strlcpy
+#include "cutils/native_handle.h"
+#include <sys/ioctl.h>
 #endif
 #define H264_SUPPORTED_WIDTH (480)
 #define H264_SUPPORTED_HEIGHT (368)
@@ -399,11 +401,16 @@ void omx_video::process_event_cb(void *ctxt, unsigned char id)
                     break;
                 case OMX_COMPONENT_GENERATE_ETB_OPQ:
                     DEBUG_PRINT_LOW("OMX_COMPONENT_GENERATE_ETB_OPQ");
+// Not support in Linux, no meta mode
+#ifdef _ANDROID_ICS_
                     if (pThis->empty_this_buffer_opaque((OMX_HANDLETYPE)p1,\
                                 (OMX_BUFFERHEADERTYPE *)p2) != OMX_ErrorNone) {
                         DEBUG_PRINT_ERROR("ERROR: ETBProxy() failed!");
-                        pThis->omx_report_error ();
                     }
+#else
+                    DEBUG_PRINT_ERROR("ERROR: ETBProxy() failed!");
+                    pThis->omx_report_error ();
+#endif
                     break;
                 case OMX_COMPONENT_GENERATE_ETB: {
                         OMX_ERRORTYPE iret;
@@ -3250,7 +3257,9 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
     int push_cnt = 0;
     unsigned nBufIndex = 0;
     OMX_ERRORTYPE ret = OMX_ErrorNone;
+#ifdef _ANDROID_ICS_
     encoder_media_buffer_type *media_buffer = NULL;
+#endif
 
 #ifdef _MSM8974_
     int fd = 0;
@@ -3262,6 +3271,8 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
     }
 
     // Buffer sanity checks
+// Not supported in Linux, no C2D
+#ifdef _ANDROID_ICS_
     if (meta_mode_enable && !mUsesColorConversion) {
         //For color-conversion case, we have an internal buffer and not a meta buffer
         bool met_error = false;
@@ -3292,6 +3303,9 @@ OMX_ERRORTYPE  omx_video::empty_this_buffer_proxy(OMX_IN OMX_HANDLETYPE
             return OMX_ErrorBadParameter;
         }
     } else {
+#else
+    {
+#endif
         nBufIndex = buffer - ((OMX_BUFFERHEADERTYPE *)m_inp_mem_ptr);
         if (nBufIndex >= m_sInPortDef.nBufferCountActual) {
             DEBUG_PRINT_ERROR("ERROR: ETBProxy: Invalid bufIndex = %u", nBufIndex);
@@ -3928,11 +3942,13 @@ OMX_ERRORTYPE omx_video::empty_buffer_done(OMX_HANDLETYPE         hComp,
     pending_input_buffers--;
 
     if (mUseProxyColorFormat && (buffer_index < (int)m_sInPortDef.nBufferCountActual)) {
+#ifdef _ANDROID_ICS_
         if (!pdest_frame  && !input_flush_progress) {
             pdest_frame = buffer;
             DEBUG_PRINT_LOW("empty_buffer_done pdest_frame address is %p",pdest_frame);
             return push_input_buffer(hComp);
         }
+#endif
         if (mUsesColorConversion) {
             // return color-conversion buffer back to the pool
             DEBUG_PRINT_LOW("empty_buffer_done insert address is %p",buffer);
@@ -4287,7 +4303,6 @@ void omx_video::omx_release_meta_buffer(OMX_BUFFERHEADERTYPE *buffer)
         }
     }
 }
-#endif
 omx_video::omx_c2d_conv::omx_c2d_conv()
 {
     c2dcc = NULL;
@@ -4615,6 +4630,7 @@ OMX_ERRORTYPE omx_video::convert_queue_buffer(OMX_HANDLETYPE hComp,
     return ret;
 }
 
+// Not supported in Linux, no libstagefright
 OMX_ERRORTYPE omx_video::push_input_buffer(OMX_HANDLETYPE hComp)
 {
     unsigned address = 0,p2,id, index = 0;
@@ -4667,3 +4683,4 @@ OMX_ERRORTYPE omx_video::push_input_buffer(OMX_HANDLETYPE hComp)
     }
     return ret;
 }
+#endif
diff --git a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
index ee19679..29671bf 100644
--- a/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
+++ b/mm-video-v4l2/vidc/venc/src/omx_video_encoder.cpp
@@ -50,7 +50,7 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 (_s_)->nVersion.nVersion = OMX_SPEC_VERSION
 
 extern int m_pipe;
-int debug_level = PRIO_ERROR;
+int debug_level = 0;
 
 // factory function executed by the core to create instances
 void *get_omx_component_factory_fn(void)
@@ -69,11 +69,11 @@ omx_venc::omx_venc()
     memset(opaque_buffer_hdr,0,sizeof(opaque_buffer_hdr));
     mUseProxyColorFormat = false;
     get_syntaxhdr_enable = false;
-#endif
-    char property_value[PROPERTY_VALUE_MAX] = {0};
+	char property_value[PROPERTY_VALUE_MAX] = {0};
     property_get("vidc.debug.level", property_value, "0");
     debug_level = atoi(property_value);
     property_value[0] = '\0';
+#endif
 }
 
 omx_venc::~omx_venc()
diff --git a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
index 4d02559..5806ec9 100644
--- a/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
+++ b/mm-video-v4l2/vidc/venc/src/video_encoder_device_v4l2.cpp
@@ -31,6 +31,7 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <sys/prctl.h>
 #include <unistd.h>
 #include <fcntl.h>
+#include <errno.h>
 #include "video_encoder_device_v4l2.h"
 #include "omx_video_encoder.h"
 #include <linux/android_pmem.h>
@@ -39,10 +40,9 @@ ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <linux/msm_ion.h>
 #endif
 #include <media/msm_media_info.h>
-#include <cutils/properties.h>
-#include <media/hardware/HardwareAPI.h>
 
 #ifdef _ANDROID_
+#include <cutils/properties.h>
 #include <media/hardware/HardwareAPI.h>
 #include <gralloc_priv.h>
 #endif
@@ -212,6 +212,7 @@ venc_dev::venc_dev(class omx_venc *venc_class)
     memset(&ltrinfo, 0, sizeof(ltrinfo));
     memset(&m_debug,0,sizeof(m_debug));
 
+#ifdef _ANDROID_
     char property_value[PROPERTY_VALUE_MAX] = {0};
     property_get("vidc.enc.log.in", property_value, "0");
     m_debug.in_buffer_log = atoi(property_value);
@@ -224,6 +225,7 @@ venc_dev::venc_dev(class omx_venc *venc_class)
 
     snprintf(m_debug.log_loc, PROPERTY_VALUE_MAX,
              "%s", BUFFER_LOG_LOC);
+#endif
 }
 
 venc_dev::~venc_dev()
@@ -765,12 +767,14 @@ bool venc_dev::venc_open(OMX_U32 codec)
     struct v4l2_control control;
     OMX_STRING device_name = (OMX_STRING)"/dev/video/venus_enc";
 
+#ifdef _ANDROID_
     char platform_name[PROPERTY_VALUE_MAX];
     property_get("ro.board.platform", platform_name, "0");
 
     if (!strncmp(platform_name, "msm8610", 7)) {
         device_name = (OMX_STRING)"/dev/video/q6_enc";
     }
+#endif
 
     m_nDriver_fd = open (device_name, O_RDWR);
 
@@ -1619,6 +1623,8 @@ bool venc_dev::venc_set_param(void *paramData, OMX_INDEXTYPE index)
             }
         case OMX_QcomIndexParamSequenceHeaderWithIDR:
             {
+// Not supported in Linux, no HardwareAPI
+#ifdef _ANDROID_
                 PrependSPSPPSToIDRFramesParams * pParam =
                     (PrependSPSPPSToIDRFramesParams *)paramData;
 
@@ -1627,7 +1633,9 @@ bool venc_dev::venc_set_param(void *paramData, OMX_INDEXTYPE index)
                     DEBUG_PRINT_ERROR("ERROR: set inband sps/pps failed");
                     return OMX_ErrorUnsupportedSetting;
                 }
-
+#else
+                DEBUG_PRINT_ERROR("ERROR: set inband sps/pps not supported");
+#endif
                 break;
             }
         case OMX_QcomIndexParamH264AUDelimiter:
@@ -2278,7 +2286,9 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
     struct v4l2_plane plane;
     int rc=0;
     struct OMX_BUFFERHEADERTYPE *bufhdr;
+#ifdef _ANDROID_
     encoder_media_buffer_type * meta_buf = NULL;
+#endif
     temp_buffer = (struct pmem *)buffer;
 
     memset (&buf, 0, sizeof(buf));
@@ -2309,6 +2319,8 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
         // CPU (Eg: MediaCodec)  0            --             0              bufhdr
         // ---------------------------------------------------------------------------------------
         if (metadatamode) {
+// Not supported in Linux, no meta mode
+#ifdef _ANDROID_
             meta_buf = (encoder_media_buffer_type *)bufhdr->pBuffer;
 
             if (!meta_buf)
@@ -2339,6 +2351,7 @@ bool venc_dev::venc_empty_buf(void *buffer, void *pmem_data_buf, unsigned index,
                 DEBUG_PRINT_LOW("venc_empty_buf: Opaque non-camera buf: fd = %d filled %d of %d",
                         fd, plane.bytesused, plane.length);
             }
+#endif
         } else {
             plane.m.userptr = (unsigned long) bufhdr->pBuffer;
             plane.data_offset = bufhdr->nOffset;
-- 
2.4.2

